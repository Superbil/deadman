#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# original software is "pingman".
# Copyright 2015 Interop Tokyo ShowNet team All Rights Reserved.
#
# upa@haeena.net


import re
import os
import sys
import time
import commands
import socket
import curses
import thread
import locale
from optparse import OptionParser

locale.setlocale(locale.LC_ALL, "en_US.UTF-8")


TITLE_PROGNAME = "Dead Man"
TITLE_VERSION = "[ver 15.3.5]"
TITLE_VERTIC_LENGTH = 4

try :
    TITLE_HOSTINFO = "From: %s (%s)" % (
        commands.getoutput ("hostname"),
        socket.gethostbyname (commands.getoutput ("hostname")))
except :
    TITLE_HOSTINFO = "From: %s" % commands.getoutput ("hostname")


ARROW = " > "
REAR  = "   "
PING_INTERVAL = 0.05
PING_ALLTARGET_INTERVAL = 1
MAX_HOSTNAME_LENGTH = 20
MAX_ADDRESS_LENGTH = 40
RESULT_STR_LENGTH = 10

DEFAULT_COLOR = 1
UP_COLOR = 2
DOWN_COLOR = 3

RTT_SCALE = 10
CONFIGFILE = "deadman.conf"


OSNAME = commands.getoutput ("uname -s")


class PingTarget :

    def __init__ (self, name, address, ping) :

        self.name = name
        self.addr = address
        self.state = False
        self.loss = 0
        self.lossrate = 0.0
        self.rtt = 0 # current RTT
        self.tot = 0 # total of all RTT
        self.avg = 0 # average of all RTT
        self.snt = 0 # number of sent ping
        self.result = []

        self.ping = ping (self.addr)

        return

    def send (self) :

        res = self.ping.send ()

        self.snt += 1

        if res >= 0 :
            # Ping Success
            self.state = True
            self.rtt = res
            self.tot += res
            self.avg = (self.tot) / self.snt

        elif res < 0 :
            # Ping Failed
            self.loss += 1
            self.state = False

        self.lossrate = float (self.loss) / float (self.snt) * 100.0
        self.result.insert (0, self.get_result_char (res))

        while len (self.result) > RESULT_STR_LENGTH :
            self.result.pop ()

        return

    def get_result_char (self, rtt) :

        if rtt < 0 :
            return "X"

        if rtt < RTT_SCALE * 1 : return "▁"
        if rtt < RTT_SCALE * 2 : return "▂"
        if rtt < RTT_SCALE * 3 : return "▃"
        if rtt < RTT_SCALE * 4 : return "▄"
        if rtt < RTT_SCALE * 5 : return "▅"
        if rtt < RTT_SCALE * 6 : return "▆"
        if rtt < RTT_SCALE * 7 : return "▇"

        return "█"


    def refresh (self) :
        self.state = None
        self.lossrate = 0.0
        self.loss = 0
        self.rtt = 0
        self.tot = 0
        self.avg = 0
        self.snt = 0
        self.result = []

        return


class PingDarwin :

    def __init__ (self, addr, timeout = 1) :

        self.addr = addr

        ipver = whichipversion (self.addr)
        if ipver == 4 :
            self.ipversion = 4
        elif ipver == 6 :
            self.ipversion = 6
        else :
            self.ipversion = -1
            print ("invalid IP address \"%s\"" % self.addr)
            raise
        return

    def send (self) :
        if self.ipversion == 4 :
            return self.sendping4 ()
        if self.ipversion == 6 :
            return self.sendping6 ()
        raise

    def sendping4 (self) :
        pingcmd = "ping -W 1000 -c 1 %s" % self.addr
        result = commands.getoutput (pingcmd)
        m = re.search (r'time=\d+\.\d+', result)
        if not m :
            return -1

        (time, rttstr) = m.group (0).split ('=')
        return float (rttstr)

    def sendping6 (self) :
        pingcmd = "ping6 -c 1 %s" % self.addr
        result = commands.getoutput (pingcmd)
        m = re.search (r'time=\d+\.\d+', result)
        if not m :
            return -1

        (time, rttstr) = m.group (0).split ('=')
        return float (rttstr)

class PingLinux :

    def __init__ (self, addr, timeout = 1) :

        self.addr = addr

        ipver = whichipversion (self.addr)
        if ipver == 4 :
            self.ipversion = 4
        elif ipver == 6 :
            self.ipversion = 6
        else :
            self.ipversion = -1
            print ("invalid IP address \"%s\"" % self.addr)
            raise
        return

    def send (self) :
        if self.ipversion == 4 :
            return self.sendping4 ()
        if self.ipversion == 6 :
            return self.sendping6 ()
        raise

    def sendping4 (self) :
        pingcmd = "ping -W 1 -c 1 %s" % self.addr
        result = commands.getoutput (pingcmd)
        m = re.search (r'time=\d+\.\d+', result)
        if not m :
            return -1

        (time, rttstr) = m.group (0).split ('=')
        return float (rttstr)

    def sendping6 (self) :
        pingcmd = "ping6 -W 1 -c 1 %s" % self.addr
        result = commands.getoutput (pingcmd)
        m = re.search (r'time=\d+\.\d+', result)
        if not m :
            return -1

        (time, rttstr) = m.group (0).split ('=')
        return float (rttstr)


class CursesCtrl () :

    def __init__ (self, stdscr) :
        self.stdscr = stdscr
        return

    def key_thread (self, *args) :

        while True :
            ch = self.stdscr.getch ()

            if ch == ord ('r') :
                num = 0
                for target in args :
                    num += 1
                    target.refresh ()
                    self.erase_pingtarget (num)
                    self.print_pingtarget (target, num)


    def update_info (self, targets) :
        # update start point and string length

        self.y, self.x = self.stdscr.getmaxyx ()

        # update arrow
        self.start_arrow = 0
        self.length_arrow = len (ARROW)

        # update hostname
        hlen = len ("HOSTNAME ")
        for target in targets :
            if hlen < len (target.name) : hlen = len (target.name)
        if hlen > MAX_HOSTNAME_LENGTH : hlen = MAX_HOSTNAME_LENGTH

        self.start_hostname = self.start_arrow + self.length_arrow
        self.length_hostname = hlen

        # update address
        alen = len ("ADDRESS ")
        for target in targets :
            if alen < len (target.addr) : alen = len (target.addr)
        if alen > MAX_ADDRESS_LENGTH : alen = MAX_ADDRESS_LENGTH
        else : alen += 5

        self.start_address = self.start_hostname + self.length_hostname + 1
        self.length_address = alen

        # update reference
        self.ref_start = self.start_address + self.length_address + 1
        self.ref_length = len (" LOSS  RTT  AVG  SNT")

        # update result
        self.res_start = self.ref_start + self.ref_length + 2
        self.res_length = self.x - (self.ref_start + self.ref_length + 2)

        # reverse
        if self.res_length < 10 :
            rev = 10 - self.res_length + len (ARROW)
            self.ref_start -= rev
            self.res_start -= rev
            self.res_length = 10

        global RESULT_STR_LENGTH
        RESULT_STR_LENGTH = self.res_length

        return


    def refresh (self) :

        self.stdscr.refresh ()
        return

    def waddstr (self, *args) :

        # wrapper for stdscr.addstr

        try :
            if len (args) == 3 :
                self.stdscr.addstr (args[0], args[1], args[2])
            if len (args) > 3 :
                self.stdscr.addstr (args[0], args[1], args[2], args[3])
        except curses.error :
            pass


    def print_title (self) :

        # Print Program name on center of top line
        spacelen = int ((self.x - len (TITLE_PROGNAME)) / 2)
        self.waddstr (0, spacelen, TITLE_PROGNAME, curses.A_BOLD)

        # Print hostname and version number
        self.waddstr (1, self.start_hostname, TITLE_HOSTINFO,
                            curses.A_BOLD)
        spacelen = self.x - (len (ARROW) + len (TITLE_VERSION))
        self.waddstr (1, spacelen, TITLE_VERSION, curses.A_BOLD)
        self.waddstr (2, len (ARROW),
                            "RTT Scale %dms. Keys: (r)efresh" % RTT_SCALE)
        self.stdscr.move (0, 0)
        self.stdscr.refresh ()
        return

    def erase_title (self) :
        space = ""
        for x in range (self.x) :
            space += " "
        self.waddstr (0, 0, space)
        self.waddstr (1, 0, space)
        self.waddstr (2, 0, space)
        return

    def print_reference (self) :
        hostname_str = "HOSTNAME"
        address_str = "ADDRESS"
        values_str = " LOSS  RTT  AVG  SNT  RESULT"

        # Print reference hostname and address
        self.waddstr (TITLE_VERTIC_LENGTH, len (ARROW),
                            hostname_str, curses.A_BOLD)
        self.waddstr (TITLE_VERTIC_LENGTH, self.start_address,
                            address_str, curses.A_BOLD)

        # Print references of values
        self.waddstr (TITLE_VERTIC_LENGTH, self.ref_start,
                            values_str, curses.A_BOLD)

        self.stdscr.move (0, 0)
        self.stdscr.refresh ()
        return

    def erase_reference (self) :
        space = ""
        for x in range (self.x) :
            space += " "
        self.waddstr (TITLE_VERTIC_LENGTH, 0, space)
        return

    def print_pingtarget (self, target, number) :

        if target.state :
            line_color = curses.color_pair (DEFAULT_COLOR)
        else :
            line_color = curses.A_BOLD

        linenum = number + TITLE_VERTIC_LENGTH

        # Print values
        values_str = " %3d%%%5d%5d%5d  " % (int(target.lossrate),
                                           target.rtt,
                                           target.avg,
                                           target.snt)

        # Print ping line
        self.waddstr (linenum, self.start_hostname,
                            target.name[0:self.length_hostname], line_color)
        self.waddstr (linenum, self.start_address,
                            target.addr[0:self.length_address], line_color)

        self.waddstr (linenum, self.ref_start, values_str, line_color)


        for n in range (len (target.result)) :
            if target.result[n] != "X" :
                color = curses.color_pair (UP_COLOR)
            else :
                color = curses.color_pair (DOWN_COLOR)

            y, x = self.stdscr.getmaxyx()
            if self.res_start + n > x :
                continue
            self.waddstr (linenum, self.res_start + n,
                                target.result[n], color)

        y, x = self.stdscr.getmaxyx()
        self.waddstr (linenum, x - len (REAR), REAR)

        self.stdscr.move (0, 0)
        self.stdscr.refresh ()
        return

    def print_arrow (self, number) :
        linenum = number + TITLE_VERTIC_LENGTH

        self.waddstr (linenum, self.start_arrow, ARROW)
        self.stdscr.move (0, 0)
        self.stdscr.refresh ()
        return

    def erase_arrow (self, number) :
        linenum = number + TITLE_VERTIC_LENGTH

        space_str = ""
        for x in range (len (ARROW)) :
            space_str += " "

        self.waddstr (linenum, self.start_arrow, space_str)
        self.stdscr.move (0, 0)
        self.stdscr.refresh ()
        return

    def erase_pingtarget (self, number) :
        linenum = number + TITLE_VERTIC_LENGTH
        space = ""
        for x in range (self.x) :
            space += " "
        self.waddstr (linenum, 2, space)
        return


class Deadman :

    def __init__ (self, stdscr, configfile) :

        self.targets = []
        self.curs = CursesCtrl (stdscr)
        self.targetlist = self.gettargetlist (configfile)

        for name, addr in self.targetlist :
            self.targets.append (PingTarget (name, addr, PING_CRADLE[OSNAME]))

        self.curs.update_info (self.targets)

        self.curs.print_title ()

        return


    def main (self) :

        thread.start_new_thread (self.curs.key_thread, tuple (self.targets))

        # print blank line
        num = 0
        for target in self.targets :
            num += 1
            self.curs.print_pingtarget (target, num)

        while True :

            self.curs.update_info (self.targets)
            self.curs.erase_title ()
            self.curs.print_title ()
            self.curs.erase_reference ()
            self.curs.print_reference ()

            num = 0
            for target in self.targets :
                num += 1

                self.curs.print_arrow (num)
                target.send ()
                self.curs.erase_pingtarget (num)
                self.curs.print_pingtarget (target, num)
                time.sleep (PING_INTERVAL)
                self.curs.erase_arrow (num)

            self.curs.print_arrow (num)
            time.sleep (PING_ALLTARGET_INTERVAL)
            self.curs.erase_arrow (num)
            self.curs.erase_pingtarget (num + 1)


    def gettargetlist (self, configfile) :

        try :
            cf = open (configfile, "r")
        except :
            sys.exit (r'can not open config file "%s"' % (configfile))

        targetlist = []

        for line in cf :

            line = re.sub ('\t', ' ', line)
            line = re.sub ('\s+', ' ', line)
            line = re.sub ('#.*', '', line)
            line = line.strip (' \r\n')
            line = line.rstrip (' \r\n')

            if line == "" :
                continue

            name, addr = line.split (' ', 2)
            targetlist.append ([name, addr])

        cf.close ()

        return targetlist




def whichipversion (addr) :

    if re.match (r'(\d{1,3}\.){3,3}\d{1,3}', addr)  :
        return 4

    if re.match (r'((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$', addr) :
        return 6

    return -1




def main (stdscr) :

    curses.start_color ()
    curses.use_default_colors ()
    curses.init_pair (DEFAULT_COLOR, -1, -1)
    curses.init_pair (UP_COLOR, curses.COLOR_GREEN, -1)
    curses.init_pair (DOWN_COLOR, curses.COLOR_RED, -1)


    deadman = Deadman (stdscr, CONFIGFILE)
    deadman.main ()

    return


PING_CRADLE = {
    "Darwin" : PingDarwin,
    "Linux" : PingLinux,
}


if __name__ == '__main__' :

    if not PING_CRADLE.has_key (OSNAME) :
        print ("%s is not supported" % OSNAME)
        sys.exit (0)


    desc = "usage : %prog [options] configfile"
    parser = OptionParser (desc)

    parser.add_option (
        '-s', '--scale', type = "int", default = 10, dest = 'scale',
        help = 'scale of ping RTT bar gap.'
    )

    (options, args) = parser.parse_args ()

    RTT_SCALE = options.scale
    try :
        CONFIGFILE = args.pop ()
    except :
        print "config file is not specified. deadman [-s scale] configfile"
        sys.exit ()

    curses.wrapper (main)


